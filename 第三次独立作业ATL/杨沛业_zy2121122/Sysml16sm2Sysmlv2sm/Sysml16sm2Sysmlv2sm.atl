-- @path Sysml16=/Sysml16sm2Sysmlv2sm/StateMachineModel.ecore
-- @path Sysmlv2=/Sysml16sm2Sysmlv2sm/sysMLv2.ecore


module Sysml16sm2Sysmlv2sm;
create OUT: Sysmlv2 from IN: Sysml16;

helper context Sysml16!StateMachine def: isParallel(): Boolean =
	if self.region.size() > 1 then
		true
	else
		false
	endif;

helper context Sysml16!State def: isParallel(): Boolean =
	if self.region.size() > 1 then
		true
	else
		false
	endif;

helper def: println(enu: OclAny): OclAny =
	enu.debug();

rule StateMachineRule {
	from
		s: Sysml16!StateMachine
	to
		p: Sysmlv2!Package (
			ownedMembership <- m
		),
		m: Sysmlv2!Membership (
			ownedMemberElement <- state
		),
		state: Sysmlv2!StateUsage (
			name <- s.name,
			isParallel <- s.isParallel(),
			ownedMembership <- s.region -> collect(e | thisModule.resolveTemp(e, 'm'))
		)
	do {
		thisModule.println(thisModule.resolveTemp(s.region.first(), 't')); 
		thisModule.println(state.ownedMembership); 
	}
}

rule RegionRule {
	from
		s: Sysml16!Region
	to
		m: Sysmlv2!Membership (
			ownedMemberElement <- t
		),
		t: Sysmlv2!StateUsage (
			name <- s.name,
			isParallel <- false,
			ownedMembership <- s.subvertex -> select(e | e.oclIsTypeOf(Sysml16!State)) ->
					collect(e | thisModule.resolveTemp(e, 'm')),
			ownedMembership <- s.transition -> collect(e | thisModule.resolveTemp(e, 'm'))
		)
}

rule TransitionRule {
	from
		s: Sysml16!Transition
	to
		m: Sysmlv2!Membership (
			ownedMemberElement <- t
		),
		t: Sysmlv2!TransitionUsage (
			name <- s.name,
			target <- thisModule.resolveTemp(s.target, 't'),
			source <- thisModule.resolveTemp(s.source, 't')
		)
}

rule StateRule {
	from
		s: Sysml16!State
	to
		m: Sysmlv2!Membership (
			ownedMemberElement <- t
		),
		t: Sysmlv2!StateUsage (
			name <- s.name,
			isParallel <- s.isParallel(),
			ownedMembership <- s.region -> collect(e | thisModule.resolveTemp(e, 'm'))
		)
}
